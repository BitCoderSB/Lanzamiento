services:
  - type: web
    name: backend # Nombre del servicio de backend en Render
    # No se especifica 'env' aquí, ya que se usa dockerfilePath.
    dockerfilePath: ./backend/Dockerfile # Ruta a tu Dockerfile para el backend
    buildCommand: npm install # Render ejecutará esto antes de la construcción del Dockerfile
    startCommand: npm start # Comando para iniciar el backend (desde package.json)
    healthCheckPath: / # Ruta para verificar si el backend está activo
    plan: free # Plan gratuito
    ports: # Puerto interno que tu backend expone en el contenedor
      - 3000 
    envVars:
      - key: MONGODB_URI # Variable de entorno para MongoDB
        sync: false # Su valor se definirá en la interfaz de Render, NO aquí.
      - key: JWT_SECRET
        value: unSecretoMuySegurO123! # <<< ¡IMPORTANTE! REEMPLAZA CON UNA CLAVE SEGURA Y REAL
      - key: PORT # Tu backend DEBE escuchar en este puerto (app.js ya lo maneja)
        value: "3000" # Render lo inyectará con este valor en el contenedor.

  - type: web
    name: frontend # Nombre del servicio de frontend en Render
    # No se especifica 'env' aquí, ya que se usa dockerfilePath.
    dockerfilePath: ./frontend/Dockerfile # Ruta a tu Dockerfile para el frontend
    buildCommand: npm install && npm run build # Comando para construir la app React
    # staticPublishPath no es necesario cuando se usa dockerfilePath, ya que el Dockerfile servirá los archivos.
    plan: free # Plan gratuito
    ports: # Puerto interno que tu frontend expone en el contenedor (con 'serve' o Nginx)
      - 3000 # Debe coincidir con el puerto EXPOSE y CMD de tu frontend/Dockerfile
    envVars:
      # URL del backend para que el frontend la conozca.
      # Render permite la comunicación interna entre servicios usando sus nombres de servicio y puertos internos.
      - key: VITE_BACKEND_URL
        value: http://backend:3000 # 'backend' es el nombre del servicio de tu backend en Render